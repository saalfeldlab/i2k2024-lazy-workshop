---
title: "Setup instructions"
author: "Stephan Saalfeld"
date: "2024-10-17T01:00"
description: "How to get started ..."
categories: [conda,java,ijava,jupyter,quarto]
---

We will do this workshop in Jupyter notebooks

In this workshop, we will learn how to use [ImgLib2](https://github.com/imglib/imglib2), [BigDataViewer](https://github.com/bigdataviewer/bigdataviewer-core), the [N5-API](https://github.com/saalfeldlab/n5), and [Apache Spark](https://spark.apache.org/) for lazy evaluation data processing workflows.  We will draft all examples in interactive [Jupyter notebooks](https://jupyter.org/).
For this, we will need to create an environment that runs a Jupyter notebook server, a fast [Java kernel](https://github.com/saalfeldlab/IJava), and a few other dependencies.
If you don't have conda installed yet, please do this now by following [their installation instructions](https://docs.anaconda.com/miniconda/miniconda-install/).

Now, we can create an environment:
```
conda create -c conda-forge -n i2k2024-lazy python=3
```
and activate it:
```
conda activate i2k2024-lazy
```
Now, let's install the Blosc compression library, the IJava Jupyter kernel, and a modern version of OpenJDK:
```
conda install conda-forge::python-blosc
conda install conda-forge::ijava
conda install conda-forge::openjdk
```

Now, checkout the repository with the code example for our workshop:
```
git clone https://github.com/saalfeldlab/i2k2024-lazy-workshop
```

This repository includes the notebooks for our workshop and renders them into a [web-blog](https://imglib.github.io/imglib2-blog/) using the [Quarto publishing system](https://quarto.org/).  For our workshop, it is not important to run Quarto, but you may find it exciting to use the same structure for your own experiments.  You will find the notebooks as posts in the repository:
```
cd i2k2024-lazy-workshop/posts
```
Here, please start your Jupyter notebook server and let's open the first example:
```
jupyter notebook
```

PS: The IJava kernel uses Java's [JShell tool](https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm#JSHEL-GUID-630F27C8-1195-4989-9F6B-2C51D46F52C8), so in a production environment, you can use JShell and [Maven](https://maven.apache.org/) to execute your code.  For that, you will have to declare the dependencies in a `pom.xml` file, and start JShell by:
```
mvn com.github.johnpoth:jshell-maven-plugin:1.3:run
```

