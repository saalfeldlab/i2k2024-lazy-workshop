<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lazy Parallel Processing and Visualization of Large Data with ImgLib2, BigDataViewer, the N5-API, and Spark</title>
<link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/</link>
<atom:link href="https://saalfeldlab.github.io/i2k2024-lazy-workshop/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://saalfeldlab.github.io/i2k2024-lazy-workshop/imglib2-logo.png</url>
<title>Lazy Parallel Processing and Visualization of Large Data with ImgLib2, BigDataViewer, the N5-API, and Spark</title>
<link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/</link>
</image>
<generator>quarto-99.9.9</generator>
<lastBuildDate>Thu, 17 Oct 2024 10:00:00 GMT</lastBuildDate>
<item>
  <title>Lazy processing with ImgLib2 and Spark</title>
  <dc:creator>Stephan Saalfeld</dc:creator>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/06-spark/06-spark.html</link>
  <description><![CDATA[ Working around (lack of) serialization. ]]></description>
  <category>imglib2</category>
  <category>jupyter</category>
  <category>notebook</category>
  <category>spark</category>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/06-spark/06-spark.html</guid>
  <pubDate>Thu, 17 Oct 2024 10:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the ImgLib2 blocks API</title>
  <dc:creator>Tobias Pietzsch</dc:creator>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/05-blocks/05-blocks.html</link>
  <description><![CDATA[ Using the ImgLib2 blocks API for downsampling and convolution ]]></description>
  <category>imglib2</category>
  <category>java</category>
  <category>n5</category>
  <category>jupyter</category>
  <category>notebook</category>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/05-blocks/05-blocks.html</guid>
  <pubDate>Thu, 17 Oct 2024 09:00:00 GMT</pubDate>
</item>
<item>
  <title>Lazy image processing with ImgLib2 cache</title>
  <dc:creator>Stephan Saalfeld</dc:creator>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/04-cache/04-cache.html</link>
  <description><![CDATA[ … by defining the processing operations over cells. ]]></description>
  <category>imglib2</category>
  <category>jupyter</category>
  <category>notebook</category>
  <category>cache</category>
  <category>lazy</category>
  <category>cell</category>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/04-cache/04-cache.html</guid>
  <pubDate>Thu, 17 Oct 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>N5 API</title>
  <dc:creator>Stephan Saalfeld</dc:creator>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/03-n5/03-n5.html</link>
  <description><![CDATA[ Read and write ImgLib2 data with the N5 API. ]]></description>
  <category>imglib2</category>
  <category>java</category>
  <category>n5</category>
  <category>hdf5</category>
  <category>zarr</category>
  <category>jupyter</category>
  <category>notebook</category>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/03-n5/03-n5.html</guid>
  <pubDate>Thu, 17 Oct 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>ImgLib2 is lazy</title>
  <dc:creator>Stephan Saalfeld</dc:creator>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/02-lazy-imglib2/02-lazy-imglib2.html</link>
  <description><![CDATA[ … very, very lazy, like … everywhere! ]]></description>
  <category>imglib2</category>
  <category>jupyter</category>
  <category>notebook</category>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/02-lazy-imglib2/02-lazy-imglib2.html</guid>
  <pubDate>Thu, 17 Oct 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Setup instructions</title>
  <dc:creator>Stephan Saalfeld</dc:creator>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/01-setup.html</link>
  <description><![CDATA[ How to get started … ]]></description>
  <category>conda</category>
  <category>java</category>
  <category>ijava</category>
  <category>jupyter</category>
  <category>quarto</category>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/01-setup.html</guid>
  <pubDate>Thu, 17 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Procedurally generated image</title>
  <link>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/02-lazy-imglib2/juliaset.html</link>
  <description><![CDATA[ We define the Juliaset as a function in 2D real space using a <a href="https://cr.openjdk.org/~jlaskey/templates/docs/api/java.base/java/util/function/BiConsumer.html">BiConsumer</a> lambda function. The BiConsumer receives two parameters, the first one (x) is the 2D coordinate, the second one (fx) is the target of the function whose value will be set in place, here we use an <code>UnsignedByteType</code>. We also have to provide a <a href="https://cr.openjdk.org/~jlaskey/templates/docs/api/java.base/java/util/function/Supplier.html">Supplier</a> for instances of the target such that multiple threads can each create their own. ]]></description>
  <guid>https://saalfeldlab.github.io/i2k2024-lazy-workshop/posts/02-lazy-imglib2/juliaset.html</guid>
  <pubDate>Wed, 30 Oct 2024 20:22:26 GMT</pubDate>
</item>
</channel>
</rss>
